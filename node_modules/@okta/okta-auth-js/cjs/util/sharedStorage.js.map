{"version":3,"sources":["../../../lib/util/sharedStorage.ts"],"names":["MAX_ENTRY_LIFETIME","pruneSharedStorage","storageManager","sharedStorage","getSharedTansactionStorage","entries","getStorage","forEach","state","entry","age","Date","now","dateCreated","setStorage","saveTransactionToSharedStorage","meta","transaction","loadTransactionFromSharedStorage","clearTransactionFromSharedStorage"],"mappings":";;;;;;;;;;;AAAA;;AAGA,MAAMA,kBAAkB,GAAG,KAAK,EAAL,GAAU,IAArC,C,CAA2C;;AAEpC,SAASC,kBAAT,CAA4BC,cAA5B,EAA4D;AACjE,QAAMC,aAAa,GAAGD,cAAc,CAACE,0BAAf,EAAtB;AACA,QAAMC,OAAO,GAAGF,aAAa,CAACG,UAAd,EAAhB;AACA,qBAAYD,OAAZ,EAAqBE,OAArB,CAA6BC,KAAK,IAAI;AACpC,UAAMC,KAAK,GAAGJ,OAAO,CAACG,KAAD,CAArB;AACA,UAAME,GAAG,GAAGC,IAAI,CAACC,GAAL,KAAaH,KAAK,CAACI,WAA/B;;AACA,QAAIH,GAAG,GAAGV,kBAAV,EAA8B;AAC5B,aAAOK,OAAO,CAACG,KAAD,CAAd;AACD;AACF,GAND;AAOAL,EAAAA,aAAa,CAACW,UAAd,CAAyBT,OAAzB;AACD;;AAEM,SAASU,8BAAT,CAAwCb,cAAxC,EAAwEM,KAAxE,EAAuFQ,IAAvF,EAA8G;AACnH,QAAMb,aAAa,GAAGD,cAAc,CAACE,0BAAf,EAAtB;AACA,QAAMC,OAAO,GAAGF,aAAa,CAACG,UAAd,EAAhB;AACAD,EAAAA,OAAO,CAACG,KAAD,CAAP,GAAiB;AACfK,IAAAA,WAAW,EAAEF,IAAI,CAACC,GAAL,EADE;AAEfK,IAAAA,WAAW,EAAED;AAFE,GAAjB;AAIAb,EAAAA,aAAa,CAACW,UAAd,CAAyBT,OAAzB;AACD;;AAGM,SAASa,gCAAT,CAA0ChB,cAA1C,EAA0EM,KAA1E,EAAyF;AAC9F,QAAML,aAAa,GAAGD,cAAc,CAACE,0BAAf,EAAtB;AACA,QAAMC,OAAO,GAAGF,aAAa,CAACG,UAAd,EAAhB;AACA,QAAMG,KAAK,GAAGJ,OAAO,CAACG,KAAD,CAArB;;AACA,MAAIC,KAAK,IAAIA,KAAK,CAACQ,WAAf,IAA8B,8BAAkBR,KAAK,CAACQ,WAAxB,CAAlC,EAAwE;AACtE,WAAOR,KAAK,CAACQ,WAAb;AACD;;AACD,SAAO,IAAP;AACD;;AAEM,SAASE,iCAAT,CAA2CjB,cAA3C,EAA2EM,KAA3E,EAA0F;AAC/F,QAAML,aAAa,GAAGD,cAAc,CAACE,0BAAf,EAAtB;AACA,QAAMC,OAAO,GAAGF,aAAa,CAACG,UAAd,EAAhB;AACA,SAAOD,OAAO,CAACG,KAAD,CAAd;AACAL,EAAAA,aAAa,CAACW,UAAd,CAAyBT,OAAzB;AACD","sourcesContent":["import { isTransactionMeta, TransactionMeta } from '../types';\nimport { StorageManager } from '../StorageManager';\n\nconst MAX_ENTRY_LIFETIME = 30 * 60 * 1000; // 30 minutes\n\nexport function pruneSharedStorage(storageManager: StorageManager) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  Object.keys(entries).forEach(state => {\n    const entry = entries[state];\n    const age = Date.now() - entry.dateCreated;\n    if (age > MAX_ENTRY_LIFETIME) {\n      delete entries[state];\n    }\n  });\n  sharedStorage.setStorage(entries);\n}\n\nexport function saveTransactionToSharedStorage(storageManager: StorageManager, state: string, meta: TransactionMeta) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  entries[state] = {\n    dateCreated: Date.now(),\n    transaction: meta\n  };\n  sharedStorage.setStorage(entries);\n}\n\n\nexport function loadTransactionFromSharedStorage(storageManager: StorageManager, state: string) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  const entry = entries[state];\n  if (entry && entry.transaction && isTransactionMeta(entry.transaction)) {\n    return entry.transaction;\n  }\n  return null;\n}\n\nexport function clearTransactionFromSharedStorage(storageManager: StorageManager, state: string) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  delete entries[state];\n  sharedStorage.setStorage(entries);\n}\n"],"file":"sharedStorage.js"}