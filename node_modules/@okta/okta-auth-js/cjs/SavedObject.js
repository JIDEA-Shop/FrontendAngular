"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

exports.default = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _AuthSdkError = _interopRequireDefault(require("./errors/AuthSdkError"));

var _util = require("./util");

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
// formerly known as "storageBuilder". Represents an object saved under a key/name.
class SavedObject {
  constructor(storage, storageName) {
    if (!storage) {
      throw new _AuthSdkError.default('"storage" is required');
    }

    if (typeof storageName !== 'string' || !storageName.length) {
      throw new _AuthSdkError.default('"storageName" is required');
    }

    this.storageName = storageName;
    this.storageProvider = storage;
  } //
  // SimpleStorage interface
  //


  getItem(key) {
    return this.getStorage()[key];
  }

  setItem(key, value) {
    return this.updateStorage(key, value);
  }

  removeItem(key) {
    return this.clearStorage(key);
  } //
  // StorageProvider interface
  //
  // TODO: remove - https://oktainc.atlassian.net/browse/OKTA-529631


  isSharedStorage() {
    var _this$storageProvider, _this$storageProvider2;

    return (0, _util.isLocalStorageAvailable)() && this.storageProvider === localStorage || !!((_this$storageProvider = (_this$storageProvider2 = this.storageProvider).isSharedStorage) !== null && _this$storageProvider !== void 0 && _this$storageProvider.call(_this$storageProvider2));
  }

  getStorage() {
    var storageString = this.storageProvider.getItem(this.storageName);
    storageString = storageString || '{}';

    try {
      return JSON.parse(storageString);
    } catch (e) {
      throw new _AuthSdkError.default('Unable to parse storage string: ' + this.storageName);
    }
  }

  setStorage(obj) {
    try {
      var storageString = obj ? (0, _stringify.default)(obj) : '{}';
      this.storageProvider.setItem(this.storageName, storageString);
    } catch (e) {
      throw new _AuthSdkError.default('Unable to set storage: ' + this.storageName);
    }
  }

  clearStorage(key) {
    if (!key) {
      // clear all
      if (this.storageProvider.removeItem) {
        this.storageProvider.removeItem(this.storageName);
      } else {
        this.setStorage();
      }

      return;
    }

    var obj = this.getStorage();
    delete obj[key];
    this.setStorage(obj);
  }

  updateStorage(key, value) {
    var obj = this.getStorage();
    obj[key] = value;
    this.setStorage(obj);
  }

}

exports.default = SavedObject;
module.exports = exports.default;
//# sourceMappingURL=SavedObject.js.map