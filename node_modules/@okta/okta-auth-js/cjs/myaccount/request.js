"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

exports.generateRequestFnFromLinks = generateRequestFnFromLinks;
exports.sendRequest = sendRequest;

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));

var _startsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/starts-with"));

var _transactions = require("./transactions");

var _http = require("../http");

var _errors = require("../errors");

const parseInsufficientAuthenticationError = header => {
  var _context, _context2, _context3;

  if (!header) {
    throw new _errors.AuthSdkError('Missing header string');
  }

  return (0, _reduce.default)(_context = (0, _map.default)(_context2 = (0, _map.default)(_context3 = header.split(',')).call(_context3, part => (0, _trim.default)(part).call(part))).call(_context2, part => part.split('='))).call(_context, (acc, curr) => {
    // unwrap quotes from value
    acc[curr[0]] = curr[1].replace(/^"(.*)"$/, '$1');
    return acc;
  }, {});
};
/* eslint-disable complexity */


async function sendRequest(oktaAuth, options) {
  const {
    accessToken: accessTokenObj,
    idToken: idTokenObj
  } = oktaAuth.tokenManager.getTokensSync();
  const idToken = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.idToken;
  const accessToken = options.accessToken || (accessTokenObj === null || accessTokenObj === void 0 ? void 0 : accessTokenObj.accessToken);
  const {
    issuer
  } = oktaAuth.options;
  const {
    url,
    method,
    payload
  } = options;
  const requestUrl = (0, _startsWith.default)(url).call(url, issuer) ? url : `${issuer}${url}`;

  if (!accessToken) {
    throw new _errors.AuthSdkError('AccessToken is required to request MyAccount API endpoints.');
  }

  let res;

  try {
    res = await (0, _http.httpRequest)(oktaAuth, {
      headers: {
        'Accept': '*/*;okta-version=1.0.0'
      },
      accessToken,
      url: requestUrl,
      method,
      ...(payload && {
        args: payload
      })
    });
  } catch (err) {
    var _errorResp$headers;

    const errorResp = err.xhr;

    if (idToken && (errorResp === null || errorResp === void 0 ? void 0 : errorResp.status) === 403 && !!(errorResp !== null && errorResp !== void 0 && (_errorResp$headers = errorResp.headers) !== null && _errorResp$headers !== void 0 && _errorResp$headers['www-authenticate'])) {
      var _errorResp$headers2;

      const {
        error,
        // eslint-disable-next-line camelcase
        error_description,
        // eslint-disable-next-line camelcase
        max_age
      } = parseInsufficientAuthenticationError(errorResp === null || errorResp === void 0 ? void 0 : (_errorResp$headers2 = errorResp.headers) === null || _errorResp$headers2 === void 0 ? void 0 : _errorResp$headers2['www-authenticate']);

      if (error === 'insufficient_authentication_context') {
        const insufficientAuthenticationError = new _errors.AuthApiError({
          errorSummary: error,
          // eslint-disable-next-line camelcase
          errorCauses: [{
            errorSummary: error_description
          }]
        }, errorResp, // eslint-disable-next-line camelcase
        {
          max_age: +max_age
        });
        throw insufficientAuthenticationError;
      } else {
        throw err;
      }
    } else {
      throw err;
    }
  }

  const map = {
    EmailTransaction: _transactions.EmailTransaction,
    EmailStatusTransaction: _transactions.EmailStatusTransaction,
    EmailChallengeTransaction: _transactions.EmailChallengeTransaction,
    ProfileTransaction: _transactions.ProfileTransaction,
    ProfileSchemaTransaction: _transactions.ProfileSchemaTransaction,
    PhoneTransaction: _transactions.PhoneTransaction
  };
  const TransactionClass = map[options.transactionClassName] || _transactions.BaseTransaction;

  if (Array.isArray(res)) {
    return (0, _map.default)(res).call(res, item => new TransactionClass(oktaAuth, {
      res: item,
      accessToken
    }));
  }

  return new TransactionClass(oktaAuth, {
    res,
    accessToken
  });
}
/* eslint-enable complexity */


function generateRequestFnFromLinks({
  oktaAuth,
  accessToken,
  methodName,
  links,
  transactionClassName
}) {
  for (const method of ['GET', 'POST', 'PUT', 'DELETE']) {
    if (method.toLowerCase() === methodName) {
      const link = links.self;
      return async payload => sendRequest(oktaAuth, {
        accessToken,
        url: link.href,
        method,
        payload,
        transactionClassName
      });
    }
  }

  const link = links[methodName];

  if (!link) {
    throw new _errors.AuthSdkError(`No link is found with methodName: ${methodName}`);
  }

  return async payload => sendRequest(oktaAuth, {
    accessToken,
    url: link.href,
    method: link.hints.allow[0],
    payload,
    transactionClassName
  });
}
//# sourceMappingURL=request.js.map