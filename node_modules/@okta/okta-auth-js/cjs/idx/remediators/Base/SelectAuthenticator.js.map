{"version":3,"file":"SelectAuthenticator.js","names":["SelectAuthenticator","Remediator","findMatchedOption","authenticators","options","option","authenticator","relatesTo","key","canRemediate","authenticatorFromRemediation","getAuthenticatorFromRemediation","remediation","length","isAuthenticator","id","matchedOption","getNextStep","authClient","common","label","value","mapAuthenticator","remediationValue","selectedAuthenticator","selectedOption","form","name","getInputAuthenticator","type","getValuesAfterProceed","values","compareAuthenticators"],"sources":["../../../../../lib/idx/remediators/Base/SelectAuthenticator.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { getAuthenticatorFromRemediation } from '../util';\nimport { IdxOption, IdxRemediationValue } from '../../types/idx-js';\nimport { Authenticator, isAuthenticator } from '../../types';\nimport { compareAuthenticators, findMatchedOption} from '../../authenticator/util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\nexport type SelectAuthenticatorValues = RemediationValues & {\n  authenticator?: string | Authenticator;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class SelectAuthenticator<T extends SelectAuthenticatorValues = SelectAuthenticatorValues>\n  extends Remediator<T> {\n  selectedAuthenticator?: Authenticator;\n  selectedOption?: any;\n\n  // Find matched authenticator in provided order\n  findMatchedOption(authenticators, options) {\n    let option;\n    for (let authenticator of authenticators) {\n      option = options\n        .find(({ relatesTo }) => relatesTo.key === authenticator.key);\n      if (option) {\n        break;\n      }\n    }\n    return option;\n  }\n\n  canRemediate() {\n    const { authenticators, authenticator } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const { options } = authenticatorFromRemediation;\n    // Let users select authenticator if no input is provided\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n\n    // Authenticator is explicitly specified by id\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      return true;\n    }\n\n    // Proceed with provided authenticators\n    const matchedOption = this.findMatchedOption(authenticators, options);\n    if (matchedOption) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  // TODO: remove this override method in the next major version - OKTA-491236\n  getNextStep(authClient: OktaAuthIdxInterface) {\n    const common = super.getNextStep(authClient);\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const options = authenticatorFromRemediation.options!.map(option => {\n      const { \n        label, \n        relatesTo\n      } = option as IdxOption;\n      const key = relatesTo!.key!;\n      return { label, value: key };\n    });\n    return { ...common, options };\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const { authenticators, authenticator } = this.values;\n\n    // Authenticator is explicitly specified by id\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      this.selectedAuthenticator = authenticator; // track the selected authenticator\n      return authenticator;\n    }\n\n    const { options } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    this.selectedAuthenticator = selectedOption.relatesTo; // track the selected authenticator\n    this.selectedOption = selectedOption;\n    return {\n      id: selectedOption?.value.form.value.find(({ name }) => name === 'id').value\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    const options = remediation.options.map(({ label, relatesTo }) => {\n      return {\n        label,\n        value: relatesTo.key\n      };\n    });\n    return { name: 'authenticator', type: 'string', options };\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticators\n    const authenticators = (this.values.authenticators as Authenticator[])\n      .filter(authenticator => {\n        return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n      });\n    return { ...this.values, authenticators };\n  }\n\n}\n"],"mappings":"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"}