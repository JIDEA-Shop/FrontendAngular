{"version":3,"file":"Remediator.js","names":["Remediator","constructor","remediation","values","options","formatAuthenticators","authenticators","authenticator","formatAuthenticator","hasAuthenticatorInList","some","existing","compareAuthenticators","push","authenticatorsData","acc","length","getName","name","canRemediate","required","getRequiredValues","needed","key","hasData","getData","allValues","getAllValues","res","data","titleCase","val","value","entry","i","getNextStep","_authClient","_context","inputs","getInputs","getAuthenticator","type","inputsFromRemediation","forEach","inputFromRemediation","input","visible","messages","alias","aliases","Array","isArray","getMessages","form","field","getValuesAfterProceed","inputsFromRemediator","relatesTo","authenticatorFromRemediation","getAuthenticatorFromRemediation","id","enrollmentId"],"sources":["../../../../../lib/idx/remediators/Base/Remediator.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable complexity */\nimport { NextStep, IdxMessage, Authenticator, Input, RemediateOptions } from '../../types';\nimport { IdxAuthenticator, IdxRemediation, IdxContext } from '../../types/idx-js';\nimport { getAllValues, getRequiredValues, titleCase, getAuthenticatorFromRemediation } from '../util';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\n// A map from IDX data values (server spec) to RemediationValues (client spec)\nexport type IdxToRemediationValueMap = Record<string, string[]>;\n\nexport interface RemediationValues {\n  stateHandle?: string;\n  authenticators?: (Authenticator | string)[];\n  authenticator?: string | Authenticator;\n  authenticatorsData?: Authenticator[];\n  resend?: boolean;\n}\n\nexport interface RemediatorConstructor {\n  new<T extends RemediationValues>(\n    remediation: IdxRemediation, \n    values?: T, \n    options?: RemediateOptions\n  ): any;\n}\n\n// Base class - DO NOT expose static remediationName\nexport class Remediator<T extends RemediationValues = RemediationValues> {\n  static remediationName: string;\n\n  remediation: IdxRemediation;\n  values: T;\n  options: RemediateOptions;\n  map?: IdxToRemediationValueMap;\n\n  constructor(\n    remediation: IdxRemediation, \n    values: T = {} as T, \n    options: RemediateOptions = {}\n  ) {\n    // assign fields to the instance\n    this.values = { ...values };\n    this.options = { ...options };\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  private formatAuthenticators() {\n    this.values.authenticators = (this.values.authenticators || []) as Authenticator[];\n\n    // ensure authenticators are in the correct format\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n\n    // add authenticator (if any) to \"authenticators\"\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n\n    // save non-key meta to \"authenticatorsData\" field\n    // authenticators will be removed after selection to avoid select-authenticator loop\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        // save authenticator meta into authenticator data\n        acc.push(authenticator);\n      }\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n\n  getName(): string {\n    return this.remediation.name;\n  }\n\n  // Override this method to provide custom check\n  /* eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars */\n  canRemediate(): boolean {\n    const required = getRequiredValues(this.remediation);\n    const needed = required!.find((key) => !this.hasData(key));\n    if (needed) {\n      return false; // missing data for a required field\n    }\n    return true; // all required fields have available data\n  }\n\n  // returns an object for the entire remediation form, or just a part\n  getData(key?: string) {\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues!.reduce((data, key) => {\n        data[key] = this.getData(key); // recursive\n        return data;\n      }, {});\n      return res;\n    }\n\n    // Map value by \"map${Property}\" function in each subClass\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](\n        this.remediation.value!.find(({name}) => name === key)\n      );\n      if (val) {\n        return val;\n      }\n    }\n\n    // If a map is defined for this key, return the first aliased property that returns a truthy value\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n        if (val) {\n          return val;\n        }\n      }\n    }\n\n    // fallback: return the value by key\n    return this.values[key];\n  }\n\n  hasData(\n    key: string // idx name\n  ): boolean \n  {\n    // no attempt to format, we want simple true/false\n    return !!this.getData(key);\n  }\n\n  getNextStep(_authClient: OktaAuthIdxInterface, _context?: IdxContext): NextStep {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    // TODO: remove type field in the next major version change\n    // https://oktainc.atlassian.net/browse/OKTA-431749\n    const type = authenticator?.type;\n    return { \n      name, \n      inputs, \n      ...(type && { type }),\n      ...(authenticator && { authenticator }),\n    };\n  }\n\n  // Get inputs for the next step\n  getInputs(): Input[] {\n    const inputs: Input[] = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let { name, type, visible, messages } = inputFromRemediation;\n      if (visible === false) {\n        return; // Filter out invisible inputs, like stateHandle\n      }\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        // handle general primitive types\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          // try find key from values\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n        if (alias) {\n          input = { ...inputFromRemediation, name: alias };\n        }\n      }\n      if (!input) {\n        input = inputFromRemediation;\n      }\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        // guarantees field-level messages are passed back\n        if (messages) {\n          input.messages = messages;\n        }\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n\n  static getMessages(remediation: IdxRemediation): IdxMessage[] | undefined {\n    if (!remediation.value) {\n      return;\n    }\n    return remediation.value[0]?.form?.value.reduce((messages: IdxMessage[], field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n      return messages;\n    }, []);\n  }\n\n  // Prepare values for the next remediation\n  // In general, remove used values from inputs for the current remediation\n  // Override this method if special cases need be handled\n  getValuesAfterProceed(): T {\n    const inputsFromRemediation = this.remediation.value || []; // \"raw\" inputs from server response\n    const inputsFromRemediator = this.getInputs(); // \"aliased\" inputs from SDK remediator\n    const inputs = [\n      ...inputsFromRemediation,\n      ...inputsFromRemediator\n    ];\n    // scrub all values related to this remediation\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n    return this.values;\n  }\n\n  protected getAuthenticator(): IdxAuthenticator | undefined {\n    // relatesTo value may be an authenticator or an authenticatorEnrollment\n    const relatesTo = this.remediation.relatesTo?.value;\n    if (!relatesTo) {\n      return;\n    }\n\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    if (!authenticatorFromRemediation) {\n      // Hopefully value is an authenticator\n      return relatesTo;\n    }\n\n    // If relatesTo is an authenticatorEnrollment, the id is actually the enrollmentId\n    // Let's get the correct authenticator id from the form value\n    const id = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'id')!.value as string;\n    const enrollmentId = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'enrollmentId')?.value as string;\n\n    return {\n      ...relatesTo,\n      id,\n      enrollmentId\n    };\n  }\n}\n"],"mappings":"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"}