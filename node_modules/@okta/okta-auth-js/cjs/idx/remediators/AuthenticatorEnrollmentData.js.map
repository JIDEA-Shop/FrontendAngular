{"version":3,"file":"AuthenticatorEnrollmentData.js","names":["AuthenticatorEnrollmentData","AuthenticatorData","mapAuthenticator","authenticatorData","getAuthenticatorData","authenticatorFromRemediation","getAuthenticatorFromRemediation","remediation","id","form","value","name","methodType","phoneNumber","getInputAuthenticator","type","label","item","val","mapAuthenticatorDataFromValues","data"],"sources":["../../../../lib/idx/remediators/AuthenticatorEnrollmentData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthenticatorData, AuthenticatorDataValues } from './Base/AuthenticatorData';\nimport { getAuthenticatorFromRemediation } from './util';\n\nexport type AuthenticatorEnrollmentDataValues =  AuthenticatorDataValues & {\n  phoneNumber?: string;\n  resend?: boolean; // resend is not a remediator value - revise when IdxResponse structure is updated\n}\nexport class AuthenticatorEnrollmentData extends AuthenticatorData<AuthenticatorEnrollmentDataValues> {\n  static remediationName = 'authenticator-enrollment-data';\n\n  mapAuthenticator() {\n    const authenticatorData = this.getAuthenticatorData();\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation)!;\n    return { \n      id: authenticatorFromRemediation.form!.value\n        .find(({ name }) => name === 'id')!.value,\n      methodType: authenticatorData!.methodType,\n      phoneNumber: authenticatorData!.phoneNumber,\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    return [\n      { name: 'methodType', type: 'string' }, \n      { name: 'phoneNumber', label: 'Phone Number', type: 'string' }\n    ].map(item => {\n      const value = remediation.form.value.find(val => val.name === item.name);\n      return { ...value, ...item };\n    });\n  }\n\n  protected mapAuthenticatorDataFromValues(data?) {\n    // get mapped authenticator from base class\n    data = super.mapAuthenticatorDataFromValues(data);\n    // add phoneNumber to authenticator if it exists in values\n    const { phoneNumber } = this.values;\n    if (!data && !phoneNumber) {\n      return;\n    }\n\n    return { \n      ...(data && data), \n      ...(phoneNumber && { phoneNumber }) \n    };\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;AAcA;;AACA;;AAfA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUO,MAAMA,2BAAN,SAA0CC,oCAA1C,CAA+F;EAGpGC,gBAAgB,GAAG;IAAA;;IACjB,MAAMC,iBAAiB,GAAG,KAAKC,oBAAL,EAA1B;IACA,MAAMC,4BAA4B,GAAG,IAAAC,qCAAA,EAAgC,KAAKC,WAArC,CAArC;IACA,OAAO;MACLC,EAAE,EAAE,8BAAAH,4BAA4B,CAACI,IAA7B,CAAmCC,KAAnC,iBACI,CAAC;QAAEC;MAAF,CAAD,KAAcA,IAAI,KAAK,IAD3B,EACkCD,KAFjC;MAGLE,UAAU,EAAET,iBAAiB,CAAES,UAH1B;MAILC,WAAW,EAAEV,iBAAiB,CAAEU;IAJ3B,CAAP;EAMD;;EAEDC,qBAAqB,CAACP,WAAD,EAAc;IAAA;;IACjC,OAAO,+BACL;MAAEI,IAAI,EAAE,YAAR;MAAsBI,IAAI,EAAE;IAA5B,CADK,EAEL;MAAEJ,IAAI,EAAE,aAAR;MAAuBK,KAAK,EAAE,cAA9B;MAA8CD,IAAI,EAAE;IAApD,CAFK,mBAGDE,IAAI,IAAI;MAAA;;MACZ,MAAMP,KAAK,GAAG,+BAAAH,WAAW,CAACE,IAAZ,CAAiBC,KAAjB,kBAA4BQ,GAAG,IAAIA,GAAG,CAACP,IAAJ,KAAaM,IAAI,CAACN,IAArD,CAAd;MACA,OAAO,EAAE,GAAGD,KAAL;QAAY,GAAGO;MAAf,CAAP;IACD,CANM,CAAP;EAOD;;EAESE,8BAA8B,CAACC,IAAD,EAAQ;IAC9C;IACAA,IAAI,GAAG,MAAMD,8BAAN,CAAqCC,IAArC,CAAP,CAF8C,CAG9C;;IACA,MAAM;MAAEP;IAAF,yBAAkB,IAAlB,CAAN;;IACA,IAAI,CAACO,IAAD,IAAS,CAACP,WAAd,EAA2B;MACzB;IACD;;IAED,OAAO,EACL,IAAIO,IAAI,IAAIA,IAAZ,CADK;MAEL,IAAIP,WAAW,IAAI;QAAEA;MAAF,CAAnB;IAFK,CAAP;EAID;;AArCmG;;;8BAAzFb,2B,qBACc,+B"}