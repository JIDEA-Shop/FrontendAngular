{"version":3,"file":"EnrollProfile.js","names":["EnrollProfile","Remediator","constructor","remediation","values","options","credentials","getCredentialsFromRemediation","authenticator","OktaPassword","canRemediate","canVerify","userProfileFromValues","getData","userProfile","userProfileFromRemediation","value","name","form","curr","required","mapUserProfile","profileAttributes","attributeNames","data","attributeValues","attributeName","length","mapCredentials","val","getInputUserProfile","input","getInputCredentials","getErrorMessages","errorRemediation","errors","field","messages","push","message"],"sources":["../../../../lib/idx/remediators/EnrollProfile.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { IdxRemediation, IdxRemediationValue, IdxAuthenticator } from '../types/idx-js';\nimport { RemediateOptions } from '../../types';\nimport { Remediator, RemediationValues } from './Base/Remediator';\nimport { Authenticator, Credentials, OktaPassword } from '../authenticator';\n\nexport interface EnrollProfileValues extends RemediationValues {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  credentials?: Credentials;\n  password?: string;\n  passcode?: string;\n}\n\nexport class EnrollProfile extends Remediator<EnrollProfileValues> {\n  static remediationName = 'enroll-profile';\n\n  authenticator: Authenticator<any> | null = null;\n\n  constructor(\n    remediation: IdxRemediation,\n    values: EnrollProfileValues = {},\n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values, options);\n\n    // credentials are only required when Profile Enrollment policy requires them\n    // if credentials are included in the remediation, they are considered required\n    // otherwise it will be omitted\n    const credentials = this.getCredentialsFromRemediation();\n    if (credentials) {\n      this.authenticator = this.authenticator = new OktaPassword({} as IdxAuthenticator);\n    }\n  }\n\n  canRemediate() {\n    // ensure credentials can be verified, if required\n    if (this.authenticator && !this.authenticator.canVerify(this.values)) {\n      return false;\n    }\n\n    const userProfileFromValues = this.getData().userProfile;\n    if (!userProfileFromValues) {\n      return false;\n    }\n    // eslint-disable-next-line max-len\n    const userProfileFromRemediation = this.remediation.value!.find(({ name }) => name === 'userProfile') as IdxRemediationValue;\n    return userProfileFromRemediation.form!.value.reduce((canRemediate, curr) => {\n      if (curr.required) {\n        canRemediate = canRemediate && !!userProfileFromValues[curr.name];\n      }\n      return canRemediate;\n    }, true);\n  }\n\n  getCredentialsFromRemediation () {\n    return this.remediation.value!.find(({ name }) => name === 'credentials');\n  }\n\n  mapUserProfile({form: { value: profileAttributes }}) {\n    const attributeNames = profileAttributes.map(({name}) => name);\n    const data = attributeNames.reduce((attributeValues, attributeName) => (\n      this.values[attributeName] ? {\n      ...attributeValues,\n      [attributeName]: this.values[attributeName]\n    } : attributeValues), {});\n    if (Object.keys(data).length === 0) {\n      return;\n    }\n    return data;\n  }\n\n  mapCredentials() {\n    const val = this.authenticator && this.authenticator.mapCredentials(this.values);\n    if (!val) {\n      return;\n    }\n    return val;\n  }\n\n  getInputUserProfile(input) {\n    return [...input.form.value];\n  }\n\n  getInputCredentials(input) {\n    return [...input.form.value];\n  }\n\n  getErrorMessages(errorRemediation) {\n    return errorRemediation.value[0].form.value.reduce((errors, field) => {\n      if (field.messages) {\n        errors.push(field.messages.value[0].message);\n      }\n      return errors;\n    }, []);\n  }\n}"],"mappings":"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"}