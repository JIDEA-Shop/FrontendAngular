{"version":3,"file":"remediate.js","names":["getActionFromValues","values","idxResponse","actions","action","resend","removeActionFromValues","undefined","removeActionFromOptions","options","actionName","entry","name","remediate","authClient","neededToProceed","interactionCode","flow","remediator","getRemediator","actionFromValues","actionFromOptions","params","valuesWithoutExecutedAction","optionsWithoutExecutedAction","requestDidSucceed","e","handleIdxError","canceled","remediationAction","proceed","terminal","isTerminalResponse","step","filterValuesForRemediation","AuthSdkError","acc","curr","canRemediate","nextStep","getNextStep","getName","data","getData","getValuesAfterProceed","useGenericRemediator","gr"],"sources":["../../../lib/idx/remediate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable max-statements, max-depth, complexity */\nimport { OktaAuthIdxInterface } from '../types';\nimport { AuthSdkError } from '../errors';\nimport { RemediationValues } from './remediators';\nimport { RemediateOptions, RemediationResponse } from './types';\nimport { \n  IdxResponse,\n  IdxActionParams, \n} from './types/idx-js';\nimport {\n  isTerminalResponse,\n  filterValuesForRemediation,\n  getRemediator,\n  getNextStep,\n  handleIdxError\n} from './util';\n\nexport interface RemediateActionWithOptionalParams {\n  name: string;\n  params?: IdxActionParams;\n}\n\nexport type RemediateAction = string | RemediateActionWithOptionalParams;\n\n\nfunction getActionFromValues(values: RemediationValues, idxResponse: IdxResponse): string | undefined {\n  // Currently support resend actions only\n  return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\n\nfunction removeActionFromValues(values: RemediationValues): RemediationValues {\n  // Currently support resend actions only\n  return {\n    ...values,\n    resend: undefined\n  };\n}\n\nfunction removeActionFromOptions(options: RemediateOptions, actionName: string): RemediateOptions {\n  let actions = options.actions || [];\n  actions = actions.filter(entry => {\n    if (typeof entry === 'string') {\n      return entry !== actionName;\n    }\n    return entry.name !== actionName;\n  });\n\n  return { ...options, actions };\n}\n\n// This function is called recursively until it reaches success or cannot be remediated\nexport async function remediate(\n  authClient: OktaAuthIdxInterface,\n  idxResponse: IdxResponse,\n  values: RemediationValues,\n  options: RemediateOptions\n): Promise<RemediationResponse> {\n  let { neededToProceed, interactionCode } = idxResponse;\n  const { flow } = options;\n\n  // If the response contains an interaction code, there is no need to remediate\n  if (interactionCode) {\n    return { idxResponse };\n  }\n\n  const remediator = getRemediator(neededToProceed, values, options);\n\n  // Try actions in idxResponse first\n  const actionFromValues = getActionFromValues(values, idxResponse);\n  const actionFromOptions = options.actions || [];\n  const actions = [\n    ...actionFromOptions,\n    ...(actionFromValues && [actionFromValues] || []),\n  ];\n  if (actions) {\n    for (let action of actions) {\n      // Action can either be specified as a string, or as an object with name and optional params\n      let params: IdxActionParams = {};\n      if (typeof action !== 'string') {\n        params = action.params || {};\n        action = action.name;\n      }\n      let valuesWithoutExecutedAction = removeActionFromValues(values);\n      let optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n\n      if (typeof idxResponse.actions[action] === 'function') {\n        try {\n          idxResponse = await idxResponse.actions[action](params);\n          idxResponse = { ...idxResponse, requestDidSucceed: true };\n        } catch (e) {\n          return handleIdxError(authClient, e, options);\n        }\n        if (action === 'cancel') {\n          return { idxResponse, canceled: true };\n        }\n        return remediate(\n          authClient, \n          idxResponse, \n          valuesWithoutExecutedAction, \n          optionsWithoutExecutedAction\n        ); // recursive call\n      }\n\n      // search for action in remediation list\n      const remediationAction = neededToProceed.find(({ name }) => name === action);\n      if (remediationAction) {\n        try {\n          idxResponse = await idxResponse.proceed(action, params);\n          idxResponse = { ...idxResponse, requestDidSucceed: true };\n        }\n        catch (e) {\n          return handleIdxError(authClient, e, options);\n        }\n\n        return remediate(authClient, idxResponse, values, optionsWithoutExecutedAction); // recursive call\n      }\n    }\n  }\n\n  // Do not attempt to remediate if response is in terminal state\n  const terminal = isTerminalResponse(idxResponse);\n  if (terminal) {\n    return { idxResponse, terminal };\n  }\n\n  if (!remediator) {\n    if (options.step) {\n      values = filterValuesForRemediation(idxResponse, options.step, values); // include only requested values\n      try {\n        idxResponse = await idxResponse.proceed(options.step, values);\n        idxResponse = { ...idxResponse, requestDidSucceed: true };\n        return { idxResponse };\n      } catch(e) {\n        return handleIdxError(authClient, e, options);\n      }\n    }\n    if (flow === 'default') {\n      return { idxResponse };\n    }\n    throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n  }\n\n  // Return next step to the caller\n  if (!remediator.canRemediate()) {\n    const nextStep = getNextStep(authClient, remediator, idxResponse);\n    return {\n      idxResponse,\n      nextStep,\n    };\n  }\n\n  const name = remediator.getName();\n  const data = remediator.getData();\n  try {\n    idxResponse = await idxResponse.proceed(name, data);\n    idxResponse = { ...idxResponse, requestDidSucceed: true };\n    // We may want to trim the values bag for the next remediation\n    // Let the remediator decide what the values should be (default to current values)\n    values = remediator.getValuesAfterProceed();\n    options = { ...options, step: undefined }; // do not re-use the step\n\n    // generic remediator should not auto proceed in pending status\n    // return nextStep directly\n    if (options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const gr = getRemediator(idxResponse.neededToProceed, values, options)!;\n      const nextStep = getNextStep(authClient, gr, idxResponse);\n      return {\n        idxResponse,\n        nextStep,\n      };\n    }\n    \n    return remediate(authClient, idxResponse, values, options); // recursive call\n  } catch (e) {\n    return handleIdxError(authClient, e, options);\n  }\n}\n"],"mappings":"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"}