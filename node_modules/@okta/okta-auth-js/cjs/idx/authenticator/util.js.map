{"version":3,"sources":["../../../../lib/idx/authenticator/util.ts"],"names":["formatAuthenticator","incoming","authenticator","key","Error","compareAuthenticators","auth1","auth2","id","findMatchedOption","authenticators","options","option","relatesTo"],"mappings":";;;;;;;;;;AAAA;;AAEO,SAASA,mBAAT,CAA6BC,QAA7B,EAA+D;AACpE,MAAIC,aAAJ;;AACA,MAAK,4BAAgBD,QAAhB,CAAL,EAAgC;AAC9BC,IAAAA,aAAa,GAAGD,QAAhB;AACD,GAFD,MAEO,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACvCC,IAAAA,aAAa,GAAG;AACdC,MAAAA,GAAG,EAAEF;AADS,KAAhB;AAGD,GAJM,MAIA;AACL,UAAM,IAAIG,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,SAAOF,aAAP;AACD,C,CAED;;;AACO,SAASG,qBAAT,CAA+BC,KAA/B,EAAsCC,KAAtC,EAA6C;AAClD,MAAI,CAACD,KAAD,IAAU,CAACC,KAAf,EAAsB;AACpB,WAAO,KAAP;AACD,GAHiD,CAIlD;;;AACA,MAAID,KAAK,CAACE,EAAN,IAAYD,KAAK,CAACC,EAAtB,EAA0B;AACxB,WAAQF,KAAK,CAACE,EAAN,KAAaD,KAAK,CAACC,EAA3B;AACD,GAPiD,CAQlD;;;AACA,MAAIF,KAAK,CAACH,GAAN,IAAaI,KAAK,CAACJ,GAAvB,EAA4B;AAC1B,WAAQG,KAAK,CAACH,GAAN,KAAcI,KAAK,CAACJ,GAA5B;AACD;;AACD,SAAO,KAAP;AACD,C,CAED;;;AACO,SAASM,iBAAT,CAA2BC,cAA3B,EAA2CC,OAA3C,EAAoD;AACzD,MAAIC,MAAJ;;AACA,OAAK,IAAIV,aAAT,IAA0BQ,cAA1B,EAA0C;AACxCE,IAAAA,MAAM,GAAG,mBAAAD,OAAO,MAAP,CAAAA,OAAO,EACR,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAAmBA,SAAS,CAACV,GAAV,KAAkBD,aAAa,CAACC,GAD3C,CAAhB;;AAEA,QAAIS,MAAJ,EAAY;AACV;AACD;AACF;;AACD,SAAOA,MAAP;AACD","sourcesContent":["import { Authenticator, isAuthenticator } from '../types';\n\nexport function formatAuthenticator(incoming: unknown): Authenticator {\n  let authenticator: Authenticator;\n  if  (isAuthenticator(incoming)) {\n    authenticator = incoming;\n  } else if (typeof incoming === 'string') {\n    authenticator = {\n      key: incoming\n    };\n  } else {\n    throw new Error('Invalid format for authenticator');\n  }\n  return authenticator;\n}\n\n// Returns true if the authenticators are equivalent\nexport function compareAuthenticators(auth1, auth2) {\n  if (!auth1 || !auth2) {\n    return false;\n  }\n  // by id\n  if (auth1.id && auth2.id) {\n    return (auth1.id === auth2.id);\n  }\n  // by key\n  if (auth1.key && auth2.key) {\n    return (auth1.key === auth2.key);\n  }\n  return false;\n}\n\n// Find matched authenticator in provided order\nexport function findMatchedOption(authenticators, options) {\n  let option;\n  for (let authenticator of authenticators) {\n    option = options\n      .find(({ relatesTo }) => relatesTo.key === authenticator.key);\n    if (option) {\n      break;\n    }\n  }\n  return option;\n}"],"file":"util.js"}