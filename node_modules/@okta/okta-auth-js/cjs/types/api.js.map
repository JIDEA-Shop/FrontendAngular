{"version":3,"file":"api.js","names":[],"sources":["../../../lib/types/api.ts"],"sourcesContent":["/* eslint-disable no-use-before-define */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthTransaction } from '../tx/AuthTransaction';\nimport { TransactionState } from '../tx/TransactionState';\nimport { Token, Tokens, RevocableToken, AccessToken, IDToken, RefreshToken } from './Token';\nimport { JWTObject } from './JWT';\nimport { CustomUserClaims, UserClaims } from './UserClaims';\nimport { CustomUrls, OktaAuthOptions, TokenParams } from './OktaAuthOptions';\nimport { StorageManager } from '../StorageManager';\nimport TransactionManager from '../TransactionManager';\nimport { TokenManagerInterface } from './TokenManager';\nimport { ServiceManagerInterface } from './Service';\nimport { OktaUserAgent } from '../OktaUserAgent';\nimport { \n  AuthenticationOptions, \n  RegistrationOptions as IdxRegistrationOptions,\n  PasswordRecoveryOptions,\n  AccountUnlockOptions,\n  ProceedOptions,\n  CancelOptions,\n  IdxTransaction,\n  IdxTransactionMeta,\n  EmailVerifyCallbackResponse,\n  IdxAuthenticator,\n  ChallengeData,\n  ActivationData,\n  WebauthnEnrollValues,\n  WebauthnVerificationValues,\n  FlowIdentifier, \n  IdxPollOptions,\n  IdxResponse,\n  IntrospectOptions,\n  InteractOptions,\n  InteractResponse,\n  StartOptions\n} from '../idx/types';\nimport { TransactionMetaOptions } from './Transaction';\nimport { RequestData, RequestOptions } from './http';\nimport { IdxToPersist, RawIdxResponse } from '../idx/types/idx-js';\n\nexport interface OktaAuthOptionsInterface {\n  options: OktaAuthOptions;\n  getIssuerOrigin(): string;\n}\n\nexport interface OktaAuthStorageInterface {\n  storageManager: StorageManager;\n\n}\nexport interface OktaAuthHttpInterface extends \n  OktaAuthOptionsInterface,\n  OktaAuthStorageInterface\n{\n  _oktaUserAgent: OktaUserAgent;\n}\n\nexport interface OktaAuthFeaturesInterface {\n  // Functional on browser only\n  features: FeaturesAPI;\n}\n\nexport interface OktaAuthTransactionInterface {\n  transactionManager: TransactionManager;\n}\n\nexport interface OktaAuthOIDCInterface extends\n  OktaAuthOptionsInterface,\n  OktaAuthHttpInterface,\n  OktaAuthFeaturesInterface,\n  OktaAuthTransactionInterface\n{\n  token: TokenAPI;\n  tokenManager: TokenManagerInterface;\n}\n\nexport interface OktaAuthIdxInterface extends\n  OktaAuthHttpInterface,\n  OktaAuthTransactionInterface,\n  Pick<OktaAuthOIDCInterface, 'token'>\n{\n  idx: IdxAPI;\n}\n\nexport interface OktaAuthInterface extends\n  OktaAuthOptionsInterface,\n  OktaAuthStorageInterface,\n  OktaAuthFeaturesInterface,\n  OktaAuthHttpInterface,\n  OktaAuthTransactionInterface,\n  OktaAuthIdxInterface,\n  OktaAuthOIDCInterface\n{\n  getOriginalUri(): string | undefined;\n  \n  \n  serviceManager: ServiceManagerInterface;\n}\n\nexport interface FieldError {\n  errorSummary: string;\n  reason?: string;\n  location?: string;\n  locationType?: string;\n  domain?: string;\n}\n\nexport interface APIError {\n  errorSummary: string;\n  errorCode?: string;\n  errorLink?: string;\n  errorId?: string;\n  errorCauses?: Array<FieldError>;\n}\n\n// HTTP API\nexport interface HttpAPI {\n  setRequestHeader(name: string, value: string): void;\n}\n\n// Transaction API\n\nexport type TransactionExistsFunction = () => boolean;\nexport interface TransactionExists extends TransactionExistsFunction {\n  _get: (key: string) => string;\n}\n\n// Authn (classic) api\nexport interface TransactionAPI {\n  exists: TransactionExists;\n  status: (args?: object) => Promise<object>;\n  resume: (args?: object) => Promise<AuthTransaction>;\n  introspect: (args?: object) => Promise<AuthTransaction>;\n  createTransaction: (res?: TransactionState) => AuthTransaction;\n  postToTransaction: (url: string, args?: RequestData, options?: RequestOptions) => Promise<AuthTransaction>;\n}\n\n// Fingerprint\nexport interface FingerprintOptions {\n  timeout?: number;\n}\n\nexport type FingerprintAPI = (options?: FingerprintOptions) => Promise<string>;\n\n// Session API\nexport interface SessionObject {\n  status: string;\n  refresh?: () => Promise<object>;\n  user?: () => Promise<object>;\n}\n\nexport interface SessionAPI {\n  close: () => Promise<object>;\n  exists: () => Promise<boolean>;\n  get: () => Promise<SessionObject>;\n  refresh: () => Promise<object>;\n  setCookieAndRedirect: (sessionToken?: string, redirectUri?: string) => void;\n}\n\nexport interface PopupParams {\n  popupTitle?: string;\n  popupWindow?: Window;\n}\n\nexport interface TokenResponse {\n  tokens: Tokens;\n  state: string;\n  code?: string;\n}\n\nexport interface ParseFromUrlOptions {\n  url?: string;\n  responseMode?: string;\n}\n\nexport type ParseFromUrlFunction = (options?: string | ParseFromUrlOptions) => Promise<TokenResponse>;\n\nexport interface ParseFromUrlInterface extends ParseFromUrlFunction {\n  _getDocument: () => Document;\n  _getLocation: () => Location;\n  _getHistory: () => History;\n}\n\nexport type GetWithRedirectFunction = (params?: TokenParams) => Promise<void>;\n\nexport type SetLocationFunction = (loc: string) => void;\n\nexport interface GetWithRedirectAPI extends GetWithRedirectFunction {\n  _setLocation: SetLocationFunction;\n}\n\nexport interface BaseTokenAPI {\n  decode(token: string): JWTObject;\n  prepareTokenParams(params?: TokenParams): Promise<TokenParams>;\n  exchangeCodeForTokens(params: TokenParams, urls?: CustomUrls): Promise<TokenResponse>;\n}\n\nexport interface TokenAPI extends BaseTokenAPI {\n  getUserInfo<S extends CustomUserClaims = CustomUserClaims>(\n    accessToken?: AccessToken,\n    idToken?: IDToken\n  ): Promise<UserClaims<S>>;\n  getWithRedirect: GetWithRedirectAPI;\n  parseFromUrl: ParseFromUrlInterface;\n  getWithoutPrompt(params?: TokenParams): Promise<TokenResponse>;\n  getWithPopup(params?: TokenParams): Promise<TokenResponse>;\n  revoke(token: RevocableToken): Promise<object>;\n  renew(token: Token): Promise<Token | undefined>;\n  renewTokens(options?: TokenParams): Promise<Tokens>;\n  renewTokensWithRefresh(tokenParams: TokenParams, refreshTokenObject: RefreshToken): Promise<Tokens>;\n  verify(token: IDToken, params?: object): Promise<IDToken>;\n  isLoginRedirect(): boolean;\n}\n\nexport interface TokenVerifyParams {\n  clientId: string;\n  issuer: string;\n  ignoreSignature?: boolean;\n  nonce?: string;\n  accessToken?: string; // raw access token string\n}\n\nexport interface IDTokenAPI {\n  authorize: {\n    _getLocationHref: () => string;\n  };\n}\n\nexport interface FeaturesAPI {\n  isLocalhost(): boolean;\n  isHTTPS(): boolean;\n  isPopupPostMessageSupported(): boolean;\n  hasTextEncoder(): boolean;\n  isTokenVerifySupported(): boolean;\n  isPKCESupported(): boolean;\n  isIE11OrLess(): boolean;\n}\n\nexport interface CryptoAPI {\n  base64UrlToBuffer(b64u: string): Uint8Array;\n  bufferToBase64Url(bin: Uint8Array): string;\n}\n\nexport interface WebauthnAPI {\n  getAssertion(credential: PublicKeyCredential): WebauthnVerificationValues;\n  getAttestation(credential: PublicKeyCredential): WebauthnEnrollValues;\n  buildCredentialRequestOptions(\n    challengeData: ChallengeData, authenticatorEnrollments: IdxAuthenticator[]\n  ): CredentialRequestOptions;\n  buildCredentialCreationOptions(\n    activationData: ActivationData, authenticatorEnrollments: IdxAuthenticator[]\n  ): CredentialCreationOptions;\n}\n\nexport interface SupportsCodeFlow {\n  useInteractionCodeFlow?: boolean;\n}\n\nexport interface SigninOptions extends \n  SupportsCodeFlow,\n  AuthenticationOptions {\n    // Only used in Authn V1\n    relayState?: string;\n    context?: {\n      deviceToken?: string;\n    };\n    sendFingerprint?: boolean;\n    stateToken?: string;\n}\n\nexport interface SigninWithRedirectOptions extends SigninOptions, TokenParams {\n  originalUri?: string;\n}\n\nexport interface SigninWithCredentialsOptions extends SigninOptions {\n  username?: string;\n  password?: string;\n}\n\nexport interface SigninAPI {\n  signIn(opts: SigninOptions): Promise<AuthTransaction>;\n  signInWithCredentials(opts: SigninWithCredentialsOptions): Promise<AuthTransaction>;\n}\n\nexport interface SignoutRedirectUrlOptions {\n  postLogoutRedirectUri?: string;\n  idToken?: IDToken;\n  state?: string;\n}\n\nexport interface SignoutOptions extends SignoutRedirectUrlOptions {\n  revokeAccessToken?: boolean;\n  revokeRefreshToken?: boolean;\n  accessToken?: AccessToken;\n  refreshToken?: RefreshToken;\n  clearTokensBeforeRedirect?: boolean;\n}\n\nexport interface SignoutAPI {\n  signOut(opts: SignoutOptions);\n}\n\nexport interface ForgotPasswordOptions {\n  username: string;\n  factorType: 'SMS' | 'EMAIL' | 'CALL';\n  relayState?: string;\n}\n\nexport interface VerifyRecoveryTokenOptions {\n  recoveryToken: string;\n}\n\nexport interface PkceAPI {\n  DEFAULT_CODE_CHALLENGE_METHOD: string;\n  generateVerifier(prefix: string): string;\n  computeChallenge(str: string): PromiseLike<any>;\n}\n\n\nexport interface IdxAPI {\n  // lowest level api\n  interact: (options?: InteractOptions) => Promise<InteractResponse>;\n  introspect: (options?: IntrospectOptions) => Promise<IdxResponse>;\n  makeIdxResponse: (rawIdxResponse: RawIdxResponse, toPersist: IdxToPersist, requestDidSucceed: boolean) => IdxResponse;\n\n  // flow entrypoints\n  authenticate: (options?: AuthenticationOptions) => Promise<IdxTransaction>;\n  register: (options?: IdxRegistrationOptions) => Promise<IdxTransaction>;\n  recoverPassword: (options?: PasswordRecoveryOptions) => Promise<IdxTransaction>;\n  unlockAccount: (options?: AccountUnlockOptions) => Promise<IdxTransaction>;\n  poll: (options?: IdxPollOptions) => Promise<IdxTransaction>;\n\n  // flow control\n  start: (options?: StartOptions) => Promise<IdxTransaction>;\n  canProceed(options?: ProceedOptions): boolean;\n  proceed: (options?: ProceedOptions) => Promise<IdxTransaction>;\n  cancel: (options?: CancelOptions) => Promise<IdxTransaction>;\n  getFlow(): FlowIdentifier | undefined;\n  setFlow(flow: FlowIdentifier): void;\n\n  // call `start` instead of `startTransaction`. `startTransaction` will be removed in next major version (7.0)\n  startTransaction: (options?: StartOptions) => Promise<IdxTransaction>;\n\n  // redirect callbacks\n  isInteractionRequired: (hashOrSearch?: string) => boolean;\n  isInteractionRequiredError: (error: Error) => boolean; \n  handleInteractionCodeRedirect: (url: string) => Promise<void>;\n  isEmailVerifyCallback: (search: string) => boolean;\n  parseEmailVerifyCallback: (search: string) => EmailVerifyCallbackResponse;\n  handleEmailVerifyCallback: (search: string) => Promise<IdxTransaction | undefined>;\n  isEmailVerifyCallbackError: (error: Error) => boolean;\n\n  // transaction meta\n  getSavedTransactionMeta: (options?: TransactionMetaOptions) => IdxTransactionMeta | undefined;\n  createTransactionMeta: (options?: TransactionMetaOptions) => Promise<IdxTransactionMeta>;\n  getTransactionMeta: (options?: TransactionMetaOptions) => Promise<IdxTransactionMeta>;\n  saveTransactionMeta: (meta: unknown) => void;\n  clearTransactionMeta: () => void;\n  isTransactionMetaValid: (meta: unknown) => boolean;\n}\n"],"mappings":""}