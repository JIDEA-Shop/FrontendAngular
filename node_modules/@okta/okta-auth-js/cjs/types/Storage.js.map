{"version":3,"file":"Storage.js","names":[],"sources":["../../../lib/types/Storage.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { TransactionMeta } from './Transaction';\nimport { Cookies, CookieOptions } from './Cookies';\nimport { RawIdxResponse } from '../idx/types/idx-js';\nimport { IntrospectOptions } from '.';\n\n// for V1 authn interface: tx.resume()\nexport interface TxStorage {\n  get(name: string): string;\n  set(name: string, value: string, expiresAt: string, options: CookieOptions): string;\n  delete(name: string): string;\n}\n\nexport interface SimpleStorage {\n  getItem(key: string): any;\n  setItem(key: string, value: any): void;\n  removeItem?: (key: string) => void;\n  // TODO: remove - https://oktainc.atlassian.net/browse/OKTA-529631\n  isSharedStorage?(): boolean;\n}\n\nexport interface StorageProvider extends SimpleStorage {\n  setStorage(obj: any): void;\n  getStorage(): any;\n  clearStorage(key?: string): void;\n  updateStorage(key: string, value: any): void;\n  // TODO: remove - https://oktainc.atlassian.net/browse/OKTA-529631\n  isSharedStorage(): boolean;\n}\n\n// will be removed in next version. OKTA-362589\nexport interface PKCEMeta {\n  codeVerifier: string;\n  redirectUri: string;\n}\n\n// will be removed in next version. OKTA-362589\nexport interface PKCEStorage extends StorageProvider {\n  setStorage(obj: PKCEMeta): void;\n  getStorage(): PKCEMeta;\n}\n\nexport interface TransactionStorage extends StorageProvider {\n  setStorage(obj: TransactionMeta): void;\n  getStorage(): TransactionMeta;\n}\n\nexport interface SavedIdxResponse extends\n  Pick<IntrospectOptions,\n    'stateHandle' |\n    'interactionHandle'\n  >\n{\n  rawIdxResponse: RawIdxResponse;\n  requestDidSucceed?: boolean;\n}\nexport interface IdxResponseStorage extends StorageProvider {\n  setStorage(obj: SavedIdxResponse): void;\n  getStorage(): SavedIdxResponse;\n}\n\nexport type StorageType = 'memory' | 'sessionStorage' | 'localStorage' | 'cookie' | 'custom' | 'auto';\nexport interface StorageOptions extends CookieOptions {\n  storageType?: StorageType;\n  storageTypes?: StorageType[];\n  storageProvider?: SimpleStorage;\n  storageKey?: string;\n  useSeparateCookies?: boolean;\n}\n\nexport interface StorageUtil {\n  storage: TxStorage;\n  testStorageType(storageType: StorageType): boolean;\n  getStorageByType(storageType: StorageType, options?: StorageOptions): SimpleStorage;\n  findStorageType(types: StorageType[]): StorageType;\n}\n\nexport interface CookieStorage extends SimpleStorage {\n  setItem(key: string, value: any, expiresAt?: string | null): void; // can customize expiresAt\n  getItem(key?: string): any; // if no key is passed, all cookies are returned\n  removeItem(key: string); // remove a cookie\n}\n\nexport interface BrowserStorageUtil extends StorageUtil {\n  browserHasLocalStorage(): boolean;\n  browserHasSessionStorage(): boolean;\n  getStorageByType(storageType: StorageType, options: StorageOptions): SimpleStorage;\n  getLocalStorage(): Storage;\n  getSessionStorage(): Storage;\n  getInMemoryStorage(): SimpleStorage;\n  getCookieStorage(options?: StorageOptions): CookieStorage;\n  testStorage(storage: any): boolean;\n  storage: Cookies;\n  inMemoryStore: Record<string, unknown>;\n\n  // will be removed in next version. OKTA-362589\n  getHttpCache(options?: StorageOptions): StorageProvider;\n  getPKCEStorage(options?: StorageOptions): PKCEStorage;\n}\n\nexport interface NodeStorageUtil extends StorageUtil {\n  // will be removed in next version. OKTA-362589\n  getHttpCache(options?: StorageOptions): StorageProvider;\n  getStorage(): SimpleStorage;\n}\n\n// type StorageBuilder = (storage: Storage | SimpleStorage, name: string) => StorageProvider;\n\nexport interface StorageManagerOptions {\n  token?: StorageOptions;\n  transaction?: StorageOptions;\n  [propName: string]: StorageOptions | undefined; // custom sections are allowed\n}\n"],"mappings":""}