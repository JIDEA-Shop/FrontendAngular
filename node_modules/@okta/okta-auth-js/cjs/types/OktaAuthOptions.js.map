{"version":3,"file":"OktaAuthOptions.js","names":[],"sources":["../../../lib/types/OktaAuthOptions.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { StorageManagerOptions, StorageUtil, SimpleStorage } from './Storage';\nimport { CookieOptions } from './Cookies';\nimport { HttpRequestClient, RequestOptions } from './http';\nimport { AuthState } from './AuthState';\nimport { TransactionManagerOptions } from './Transaction';\nimport { IdxTransactionMeta, RunOptions } from '../idx/types';\nimport { ServiceManagerOptions } from './Service';\nimport OktaAuth from '../OktaAuth';\nimport { OAuthResponseMode, OAuthResponseType } from './OAuth';\nimport { SetLocationFunction } from './api';\n\n\nexport interface IsAuthenticatedOptions {\n  onExpiredToken?: 'renew' | 'remove' | 'none';\n}\n\nexport interface TokenManagerOptions {\n  autoRenew?: boolean;\n  autoRemove?: boolean;\n  clearPendingRemoveTokens?: boolean;\n  secure?: boolean;\n  storage?: string | SimpleStorage;\n  storageKey?: string;\n  expireEarlySeconds?: number;\n  syncStorage?: boolean;\n}\n\nexport interface CustomUrls {\n  issuer?: string;\n  authorizeUrl?: string;\n  userinfoUrl?: string;\n  tokenUrl?: string;\n  revokeUrl?: string;\n  logoutUrl?: string;\n}\n\nexport interface TokenParams extends CustomUrls {\n  pkce?: boolean;\n  clientId?: string;\n  redirectUri?: string;\n  responseType?: OAuthResponseType | OAuthResponseType[];\n  responseMode?: OAuthResponseMode;\n  state?: string;\n  nonce?: string;\n  scopes?: string[];\n  display?: string;\n  ignoreSignature?: boolean;\n  codeVerifier?: string;\n  authorizationCode?: string;\n  codeChallenge?: string;\n  codeChallengeMethod?: string;\n  interactionCode?: string;\n  idp?: string;\n  idpScope?: string | string[];\n  loginHint?: string;\n  maxAge?: string | number;\n  prompt?: string;\n  sessionToken?: string;\n  timeout?: number;\n  extraParams?: { [propName: string]: string }; // custom authorize query params\n  // TODO: remove in the next major version\n  popupTitle?: string;\n}\n\nexport interface OktaAuthOptions extends\n  CustomUrls,\n  Pick<TokenParams,\n    'issuer' |\n    'clientId' |\n    'redirectUri' |\n    'responseType' |\n    'responseMode' |\n    'scopes' |\n    'state' |\n    'pkce' |\n    'ignoreSignature' |\n    'codeChallenge' |\n    'codeChallengeMethod'\n  >,\n  Pick<IdxTransactionMeta,\n    'flow' |\n    'activationToken' |\n    'recoveryToken'\n  >\n{\n  useInteractionCodeFlow?: boolean;\n  ignoreLifetime?: boolean;\n  tokenManager?: TokenManagerOptions;\n  postLogoutRedirectUri?: string;\n  storageUtil?: StorageUtil;\n  ajaxRequest?: object;\n  httpRequestClient?: HttpRequestClient;\n  httpRequestInterceptors?: ((request: RequestOptions) => void)[];\n  cookies?: CookieOptions;\n  transformErrorXHR?: (xhr: object) => any;\n  headers?: object;\n  maxClockSkew?: number;\n  transformAuthState?: (oktaAuth: OktaAuth, authState: AuthState) => Promise<AuthState>;\n  restoreOriginalUri?: (oktaAuth: OktaAuth, originalUri?: string) => Promise<void>;\n  devMode?: boolean;\n  storageManager?: StorageManagerOptions;\n  services?: ServiceManagerOptions;\n  transactionManager?: TransactionManagerOptions;\n  // BETA WARNING: configs in this section are subject to change without a breaking change notice\n  idx?: Pick<RunOptions,\n    'useGenericRemediator' |\n    'exchangeCodeForTokens'\n  >;\n  \n  // For server-side web applications ONLY!\n  clientSecret?: string;\n  setLocation?: SetLocationFunction;\n}"],"mappings":""}