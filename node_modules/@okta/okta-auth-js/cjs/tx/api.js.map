{"version":3,"sources":["../../../lib/tx/api.ts"],"names":["transactionStatus","sdk","args","getIssuerOrigin","withCredentials","resumeTransaction","stateToken","tx","exists","_get","STATE_TOKEN_KEY_NAME","reject","AuthSdkError","status","then","res","AuthTransaction","introspectAuthn","transactionStep","transactionExists","postToTransaction","url","options"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n/* eslint-disable complexity, max-statements */\nimport { post } from '../http';\nimport AuthSdkError from '../errors/AuthSdkError';\nimport { STATE_TOKEN_KEY_NAME } from '../constants';\nimport { addStateToken } from './util';\nimport { AuthTransaction } from './AuthTransaction';\n\nexport function transactionStatus(sdk, args) {\n  args = addStateToken(sdk, args);\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn', args, { withCredentials: true });\n}\n\nexport function resumeTransaction(sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to resume'));\n    }\n  }\n  return sdk.tx.status(args)\n    .then(function(res) {\n      return new AuthTransaction(sdk, res);\n    });\n}\n\nexport function introspectAuthn (sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to evaluate'));\n    }\n  }\n  return transactionStep(sdk, args)\n    .then(function (res) {\n      return new AuthTransaction(sdk, res);\n    });\n}\n\nexport function transactionStep(sdk, args) {\n  args = addStateToken(sdk, args);\n  // v1 pipeline introspect API\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn/introspect', args, { withCredentials: true });\n}\n\nexport function transactionExists(sdk) {\n  // We have a cookie state token\n  return !!sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n}\n\nexport function postToTransaction(sdk, url, args, options?) {\n  options = Object.assign({ withCredentials: true }, options);\n  return post(sdk, url, args, options)\n    .then(function(res) {\n      return new AuthTransaction(sdk, res);\n    });\n}\n"],"file":"api.js"}