/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and limitations under the License.
 */

import AuthSdkError from './errors/AuthSdkError.js';
import { REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_NONCE_COOKIE_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants.js';
import { isTransactionMeta, isOAuthTransactionMeta } from './types/Transaction.js';
import './idx/types/api.js';
import { warn } from './util/console.js';
import './myaccount/types.js';
import { isRawIdxResponse } from './idx/types/idx-js.js';
import { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';

class TransactionManager {
    constructor(options) {
        this.storageManager = options.storageManager;
        this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;
        this.saveNonceCookie = options.saveNonceCookie === false ? false : true;
        this.saveStateCookie = options.saveStateCookie === false ? false : true;
        this.saveParamsCookie = options.saveParamsCookie === false ? false : true;
        this.enableSharedStorage = options.enableSharedStorage === false ? false : true;
        this.saveLastResponse = options.saveLastResponse === false ? false : true;
        this.options = options;
    }
    clear(options = {}) {
        const transactionStorage = this.storageManager.getTransactionStorage();
        const meta = transactionStorage.getStorage();
        transactionStorage.clearStorage();
        if (this.enableSharedStorage && options.clearSharedStorage !== false) {
            const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);
            if (state) {
                clearTransactionFromSharedStorage(this.storageManager, state);
            }
        }
        if (options.clearIdxResponse !== false) {
            this.clearIdxResponse();
        }
        if (!this.legacyWidgetSupport) {
            return;
        }
        if (options.oauth) {
            this.clearLegacyOAuthParams();
        }
        if (options.pkce) {
            this.clearLegacyPKCE();
        }
    }
    save(meta, options = {}) {
        let storage = this.storageManager.getTransactionStorage();
        const obj = storage.getStorage();
        if (isTransactionMeta(obj) && !options.muteWarning) {
            warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');
        }
        storage.setStorage(meta);
        if (this.enableSharedStorage && meta.state) {
            saveTransactionToSharedStorage(this.storageManager, meta.state, meta);
        }
        if (!options.oauth) {
            return;
        }
        if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {
            const cookieStorage = this.storageManager.getStorage({ storageType: 'cookie' });
            if (this.saveParamsCookie) {
                const { responseType, state, nonce, scopes, clientId, urls, ignoreSignature } = meta;
                const oauthParams = {
                    responseType,
                    state,
                    nonce,
                    scopes,
                    clientId,
                    urls,
                    ignoreSignature
                };
                cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);
            }
            if (this.saveNonceCookie && meta.nonce) {
                cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);
            }
            if (this.saveStateCookie && meta.state) {
                cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);
            }
        }
    }
    exists(options = {}) {
        try {
            const meta = this.load(options);
            return !!meta;
        }
        catch (_a) {
            return false;
        }
    }
    load(options = {}) {
        let meta;
        if (this.enableSharedStorage && options.state) {
            pruneSharedStorage(this.storageManager);
            meta = loadTransactionFromSharedStorage(this.storageManager, options.state);
            if (isTransactionMeta(meta)) {
                return meta;
            }
        }
        let storage = this.storageManager.getTransactionStorage();
        meta = storage.getStorage();
        if (isTransactionMeta(meta)) {
            return meta;
        }
        if (!this.legacyWidgetSupport) {
            return null;
        }
        if (options.oauth) {
            try {
                const oauthParams = this.loadLegacyOAuthParams();
                Object.assign(meta, oauthParams);
            }
            finally {
                this.clearLegacyOAuthParams();
            }
        }
        if (options.pkce) {
            try {
                const pkceMeta = this.loadLegacyPKCE();
                Object.assign(meta, pkceMeta);
            }
            finally {
                this.clearLegacyPKCE();
            }
        }
        if (isTransactionMeta(meta)) {
            return meta;
        }
        return null;
    }
    clearLegacyPKCE() {
        let storage;
        if (this.storageManager.storageUtil.testStorageType('localStorage')) {
            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });
            storage.clearStorage();
        }
        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });
            storage.clearStorage();
        }
    }
    loadLegacyPKCE() {
        let storage;
        let obj;
        if (this.storageManager.storageUtil.testStorageType('localStorage')) {
            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });
            obj = storage.getStorage();
            if (obj && obj.codeVerifier) {
                return obj;
            }
        }
        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
            storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });
            obj = storage.getStorage();
            if (obj && obj.codeVerifier) {
                return obj;
            }
        }
        throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);
    }
    clearLegacyOAuthParams() {
        let storage;
        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });
            storage.clearStorage();
        }
        if (this.storageManager.storageUtil.testStorageType('cookie')) {
            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });
            storage.clearStorage();
        }
    }
    loadLegacyOAuthParams() {
        let storage;
        let oauthParams;
        if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });
            oauthParams = storage.getStorage();
        }
        if (isOAuthTransactionMeta(oauthParams)) {
            return oauthParams;
        }
        if (this.storageManager.storageUtil.testStorageType('cookie')) {
            storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });
            oauthParams = storage.getStorage();
        }
        if (isOAuthTransactionMeta(oauthParams)) {
            return oauthParams;
        }
        throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');
    }
    saveIdxResponse(data) {
        if (!this.saveLastResponse) {
            return;
        }
        const storage = this.storageManager.getIdxResponseStorage();
        if (!storage) {
            return;
        }
        storage.setStorage(data);
    }
    loadIdxResponse(options) {
        if (!this.saveLastResponse) {
            return null;
        }
        const storage = this.storageManager.getIdxResponseStorage();
        if (!storage) {
            return null;
        }
        const storedValue = storage.getStorage();
        if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {
            return null;
        }
        if (options) {
            const { stateHandle, interactionHandle } = options;
            if (stateHandle && storedValue.stateHandle !== stateHandle) {
                return null;
            }
            if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {
                return null;
            }
        }
        return storedValue;
    }
    clearIdxResponse() {
        if (!this.saveLastResponse) {
            return;
        }
        const storage = this.storageManager.getIdxResponseStorage();
        storage === null || storage === void 0 ? void 0 : storage.clearStorage();
    }
}

export { TransactionManager as default };
//# sourceMappingURL=TransactionManager.js.map
