/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and limitations under the License.
 */

import { removeNils } from '../util/object.js';
import { removeTrailingSlash } from '../util/url.js';
import { assertValidConfig } from '../builderUtil.js';
import fetchRequest from '../fetch/fetchRequest.js';
import { getCookieSettings, getStorage, STORAGE_MANAGER_OPTIONS, enableSharedStorage } from './browser.js';
import { isHTTPS } from '../features.js';

function getDefaultOptions() {
    const options = {
        devMode: false,
        httpRequestClient: fetchRequest,
        storageUtil: getStorage(),
        storageManager: STORAGE_MANAGER_OPTIONS,
        transactionManager: {
            enableSharedStorage
        }
    };
    return options;
}
function mergeOptions(options, args) {
    return Object.assign({}, options, removeNils(args), {
        storageManager: Object.assign({}, options.storageManager, args.storageManager),
        transactionManager: Object.assign({}, options.transactionManager, args.transactionManager),
    });
}
function buildOptions(args = {}) {
    var _a, _b;
    assertValidConfig(args);
    args = mergeOptions(getDefaultOptions(), args);
    return removeNils({
        issuer: removeTrailingSlash(args.issuer),
        tokenUrl: removeTrailingSlash(args.tokenUrl),
        authorizeUrl: removeTrailingSlash(args.authorizeUrl),
        userinfoUrl: removeTrailingSlash(args.userinfoUrl),
        revokeUrl: removeTrailingSlash(args.revokeUrl),
        logoutUrl: removeTrailingSlash(args.logoutUrl),
        clientId: args.clientId,
        redirectUri: args.redirectUri,
        state: args.state,
        scopes: args.scopes,
        postLogoutRedirectUri: args.postLogoutRedirectUri,
        responseMode: args.responseMode,
        responseType: args.responseType,
        pkce: args.pkce === false ? false : true,
        useInteractionCodeFlow: args.useInteractionCodeFlow,
        httpRequestClient: args.httpRequestClient,
        httpRequestInterceptors: args.httpRequestInterceptors,
        transformErrorXHR: args.transformErrorXHR,
        transformAuthState: args.transformAuthState,
        restoreOriginalUri: args.restoreOriginalUri,
        storageUtil: args.storageUtil,
        headers: args.headers,
        devMode: !!args.devMode,
        storageManager: args.storageManager,
        transactionManager: args.transactionManager,
        cookies: getCookieSettings(args, isHTTPS()),
        flow: args.flow,
        codeChallenge: args.codeChallenge,
        codeChallengeMethod: args.codeChallengeMethod,
        recoveryToken: args.recoveryToken,
        activationToken: args.activationToken,
        idx: {
            useGenericRemediator: !!((_a = args.idx) === null || _a === void 0 ? void 0 : _a.useGenericRemediator),
            exchangeCodeForTokens: ((_b = args.idx) === null || _b === void 0 ? void 0 : _b.exchangeCodeForTokens) !== false
        },
        ignoreSignature: !!args.ignoreSignature,
        clientSecret: args.clientSecret,
        setLocation: args.setLocation
    });
}

export { buildOptions, getDefaultOptions };
//# sourceMappingURL=index.js.map
