import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { OktaAuth } from '@okta/okta-auth-js';
import { BehaviorSubject } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { OKTA_AUTH } from '../models/okta.config';
var defaultAuthState = {
    isAuthenticated: false
};
var OktaAuthStateService = /** @class */ (function () {
    function OktaAuthStateService(oktaAuth) {
        this.oktaAuth = oktaAuth;
        this._authState = new BehaviorSubject(defaultAuthState);
        // only expose readonly property
        this.authState$ = this._authState.asObservable();
        this.updateAuthState = this.updateAuthState.bind(this);
        // set initial authState
        var initialAuthState = this.oktaAuth.authStateManager.getAuthState() || defaultAuthState;
        this._authState.next(initialAuthState);
        // subscribe to future changes
        this.oktaAuth.authStateManager.subscribe(this.updateAuthState);
    }
    OktaAuthStateService.prototype.ngOnDestroy = function () {
        this.oktaAuth.authStateManager.unsubscribe(this.updateAuthState);
    };
    // Observes as true when any group input can match groups from user claims 
    OktaAuthStateService.prototype.hasAnyGroups = function (groups) {
        var _this = this;
        return this.authState$.pipe(mergeMap(function (_a) {
            var isAuthenticated = _a.isAuthenticated, idToken = _a.idToken;
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var key, value, userInfo;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // return false when not authenticated or openid is not in scopes
                            if (!isAuthenticated || !idToken) {
                                return [2 /*return*/, false];
                            }
                            // transform inputs to consistent object format
                            if (typeof groups === 'string') {
                                groups = { groups: [groups] };
                            }
                            if (Array.isArray(groups)) {
                                groups = { groups: groups };
                            }
                            key = Object.keys(groups)[0];
                            value = groups[key];
                            // groups or custom claims is available in idToken
                            if (idToken.claims[key]) {
                                return [2 /*return*/, value.some(function (authority) { return idToken.claims[key].includes(authority); })];
                            }
                            return [4 /*yield*/, this.oktaAuth.getUser()];
                        case 1:
                            userInfo = _b.sent();
                            if (!userInfo[key]) {
                                return [2 /*return*/, false];
                            }
                            return [2 /*return*/, value.some(function (authority) { return userInfo[key].includes(authority); })];
                    }
                });
            });
        }));
    };
    OktaAuthStateService.prototype.updateAuthState = function (authState) {
        this._authState.next(authState);
    };
    OktaAuthStateService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(OKTA_AUTH)),
        tslib_1.__metadata("design:paramtypes", [OktaAuth])
    ], OktaAuthStateService);
    return OktaAuthStateService;
}());
export { OktaAuthStateService };
//# sourceMappingURL=auth-state.service.js.map