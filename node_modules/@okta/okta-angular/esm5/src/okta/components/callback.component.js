/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Component, Optional, Injector, Inject } from '@angular/core';
import { OktaAuth } from '@okta/okta-auth-js';
import { OKTA_CONFIG, OKTA_AUTH } from '../models/okta.config';
var OktaCallbackComponent = /** @class */ (function () {
    function OktaCallbackComponent(config, oktaAuth, injector) {
        this.config = config;
        this.oktaAuth = oktaAuth;
        this.injector = injector;
    }
    OktaCallbackComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1, isInteractionRequiredError, _a, onAuthResume, onAuthRequired, callbackFn;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri
                        return [4 /*yield*/, this.oktaAuth.handleLoginRedirect()];
                    case 1:
                        // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri
                        _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        isInteractionRequiredError = this.oktaAuth.isInteractionRequiredError || this.oktaAuth.idx.isInteractionRequiredError;
                        if (isInteractionRequiredError(e_1) && this.injector) {
                            _a = this.config, onAuthResume = _a.onAuthResume, onAuthRequired = _a.onAuthRequired;
                            callbackFn = onAuthResume || onAuthRequired;
                            if (callbackFn) {
                                callbackFn(this.oktaAuth, this.injector);
                                return [2 /*return*/];
                            }
                        }
                        this.error = e_1.toString();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OktaCallbackComponent = tslib_1.__decorate([
        Component({
            template: "<div>{{error}}</div>"
        }),
        tslib_1.__param(0, Inject(OKTA_CONFIG)),
        tslib_1.__param(1, Inject(OKTA_AUTH)),
        tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object, OktaAuth,
            Injector])
    ], OktaCallbackComponent);
    return OktaCallbackComponent;
}());
export { OktaCallbackComponent };
//# sourceMappingURL=callback.component.js.map