/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { NgModule, Inject, Optional, VERSION } from '@angular/core';
import { Router } from '@angular/router';
import { Location } from '@angular/common';
import { OktaCallbackComponent } from './components/callback.component';
import { OktaAuthGuard } from './okta.guard';
import { OktaAuthStateService } from './services/auth-state.service';
import { OktaHasAnyGroupDirective } from './has-any-group.directive';
import { OKTA_CONFIG, OKTA_AUTH } from './models/okta.config';
import { AuthSdkError, toRelativeUrl } from '@okta/okta-auth-js';
import { compare } from 'compare-versions';
import packageInfo from './packageInfo';
export function oktaAuthFactory(config) {
    return config.oktaAuth;
}
var OktaAuthModule = /** @class */ (function () {
    function OktaAuthModule(config, location, router) {
        var _this = this;
        var oktaAuth = config.oktaAuth;
        var isAuthJsSupported = oktaAuth._oktaUserAgent && compare(oktaAuth._oktaUserAgent.getVersion(), packageInfo.authJSMinSupportedVersion, '>=');
        if (!isAuthJsSupported) {
            throw new AuthSdkError("Passed in oktaAuth is not compatible with the SDK, minimum supported okta-auth-js version is " + packageInfo.authJSMinSupportedVersion + ".");
        }
        // Add Okta UA
        oktaAuth._oktaUserAgent.addEnvironment(packageInfo.name + "/" + packageInfo.version);
        oktaAuth._oktaUserAgent.addEnvironment("Angular/" + VERSION.full);
        // Provide a default implementation of `restoreOriginalUri`
        if (!oktaAuth.options.restoreOriginalUri && router && location) {
            oktaAuth.options.restoreOriginalUri = function (_, originalUri) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var baseUrl, routePath;
                return tslib_1.__generator(this, function (_a) {
                    baseUrl = window.location.origin + location.prepareExternalUrl('');
                    routePath = toRelativeUrl(originalUri || '/', baseUrl);
                    router.navigateByUrl(routePath);
                    return [2 /*return*/];
                });
            }); };
        }
        // Start services
        oktaAuth.start();
    }
    OktaAuthModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                OktaCallbackComponent,
                OktaHasAnyGroupDirective,
            ],
            exports: [
                OktaCallbackComponent,
                OktaHasAnyGroupDirective,
            ],
            providers: [
                OktaAuthGuard,
                OktaAuthStateService,
                {
                    provide: OKTA_AUTH,
                    useFactory: oktaAuthFactory,
                    deps: [OKTA_CONFIG]
                },
            ]
        }),
        tslib_1.__param(0, Inject(OKTA_CONFIG)),
        tslib_1.__param(1, Optional()),
        tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object, Location,
            Router])
    ], OktaAuthModule);
    return OktaAuthModule;
}());
export { OktaAuthModule };
//# sourceMappingURL=okta.module.js.map