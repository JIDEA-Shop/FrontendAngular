import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { OktaAuth } from '@okta/okta-auth-js';
import { BehaviorSubject } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { OKTA_AUTH } from '../models/okta.config';
const defaultAuthState = {
    isAuthenticated: false
};
let OktaAuthStateService = class OktaAuthStateService {
    constructor(oktaAuth) {
        this.oktaAuth = oktaAuth;
        this._authState = new BehaviorSubject(defaultAuthState);
        // only expose readonly property
        this.authState$ = this._authState.asObservable();
        this.updateAuthState = this.updateAuthState.bind(this);
        // set initial authState
        const initialAuthState = this.oktaAuth.authStateManager.getAuthState() || defaultAuthState;
        this._authState.next(initialAuthState);
        // subscribe to future changes
        this.oktaAuth.authStateManager.subscribe(this.updateAuthState);
    }
    ngOnDestroy() {
        this.oktaAuth.authStateManager.unsubscribe(this.updateAuthState);
    }
    // Observes as true when any group input can match groups from user claims 
    hasAnyGroups(groups) {
        return this.authState$.pipe(mergeMap(({ isAuthenticated, idToken }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            // return false when not authenticated or openid is not in scopes
            if (!isAuthenticated || !idToken) {
                return false;
            }
            // transform inputs to consistent object format
            if (typeof groups === 'string') {
                groups = { groups: [groups] };
            }
            if (Array.isArray(groups)) {
                groups = { groups };
            }
            const key = Object.keys(groups)[0];
            const value = groups[key];
            // groups or custom claims is available in idToken
            if (idToken.claims[key]) {
                return value.some((authority) => idToken.claims[key].includes(authority));
            }
            // try /userinfo endpoint when thin idToken (no groups claim) is returned
            // https://developer.okta.com/docs/concepts/api-access-management/#tokens-and-scopes
            const userInfo = yield this.oktaAuth.getUser();
            if (!userInfo[key]) {
                return false;
            }
            return value.some((authority) => userInfo[key].includes(authority));
        })));
    }
    updateAuthState(authState) {
        this._authState.next(authState);
    }
};
OktaAuthStateService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Inject(OKTA_AUTH)),
    tslib_1.__metadata("design:paramtypes", [OktaAuth])
], OktaAuthStateService);
export { OktaAuthStateService };
//# sourceMappingURL=auth-state.service.js.map