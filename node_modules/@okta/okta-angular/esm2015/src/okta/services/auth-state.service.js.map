{"version":3,"file":"auth-state.service.js","sourceRoot":"","sources":["../../../package/src/okta/services/auth-state.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy, Inject } from '@angular/core';\nimport { AuthState, OktaAuth, UserClaims } from '@okta/okta-auth-js';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { OKTA_AUTH } from '../models/okta.config';\n\nconst defaultAuthState = {\n  isAuthenticated: false\n};\n\nexport type Groups = string | string[] | { [key: string]: string[] };\n\n@Injectable()\nexport class OktaAuthStateService implements OnDestroy {\n  private _authState: BehaviorSubject<AuthState> = new BehaviorSubject<AuthState>(defaultAuthState);\n  \n  // only expose readonly property\n  public readonly authState$: Observable<AuthState> = this._authState.asObservable();\n\n  constructor(@Inject(OKTA_AUTH) private oktaAuth: OktaAuth) {\n    this.updateAuthState = this.updateAuthState.bind(this);\n\n    // set initial authState\n    const initialAuthState = this.oktaAuth.authStateManager.getAuthState() || defaultAuthState;\n    this._authState.next(initialAuthState);\n\n    // subscribe to future changes\n    this.oktaAuth.authStateManager.subscribe(this.updateAuthState);\n  }\n\n  ngOnDestroy(): void {\n    this.oktaAuth.authStateManager.unsubscribe(this.updateAuthState);\n  }\n\n  // Observes as true when any group input can match groups from user claims \n  hasAnyGroups(groups: Groups): Observable<boolean> {\n    return this.authState$.pipe(\n      mergeMap(async ({ isAuthenticated, idToken }) => {\n        // return false when not authenticated or openid is not in scopes\n        if (!isAuthenticated || !idToken) {\n          return false;\n        }\n\n        // transform inputs to consistent object format\n        if (typeof groups === 'string') {\n          groups = { groups: [groups] };\n        }\n        if (Array.isArray(groups)) {\n          groups = { groups };\n        }\n\n        const key = Object.keys(groups)[0] as keyof UserClaims;\n        const value = groups[key];\n\n        // groups or custom claims is available in idToken\n        if (idToken.claims[key]) {\n          return value.some((authority: string) => (idToken.claims[key] as unknown as string[]).includes(authority));\n        }\n\n        // try /userinfo endpoint when thin idToken (no groups claim) is returned\n        // https://developer.okta.com/docs/concepts/api-access-management/#tokens-and-scopes\n        const userInfo = await this.oktaAuth.getUser();\n        if (!userInfo[key]) {\n          return false;\n        }\n        return value.some((authority: string) => (userInfo[key] as unknown as string[]).includes(authority));\n      })\n    );\n  }\n\n  private updateAuthState(authState: AuthState): void {\n    this._authState.next(authState);\n  }\n}\n"]}