/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { Component, Optional, Injector, Inject } from '@angular/core';
import { OktaAuth } from '@okta/okta-auth-js';
import { OKTA_CONFIG, OKTA_AUTH } from '../models/okta.config';
let OktaCallbackComponent = class OktaCallbackComponent {
    constructor(config, oktaAuth, injector) {
        this.config = config;
        this.oktaAuth = oktaAuth;
        this.injector = injector;
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri
                yield this.oktaAuth.handleLoginRedirect();
            }
            catch (e) {
                // Callback from social IDP. Show custom login page to continue.
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore Supports auth-js v5 & v6
                const isInteractionRequiredError = this.oktaAuth.isInteractionRequiredError || this.oktaAuth.idx.isInteractionRequiredError;
                if (isInteractionRequiredError(e) && this.injector) {
                    const { onAuthResume, onAuthRequired } = this.config;
                    const callbackFn = onAuthResume || onAuthRequired;
                    if (callbackFn) {
                        callbackFn(this.oktaAuth, this.injector);
                        return;
                    }
                }
                this.error = e.toString();
            }
        });
    }
};
OktaCallbackComponent = tslib_1.__decorate([
    Component({
        template: `<div>{{error}}</div>`
    }),
    tslib_1.__param(0, Inject(OKTA_CONFIG)),
    tslib_1.__param(1, Inject(OKTA_AUTH)),
    tslib_1.__param(2, Optional()),
    tslib_1.__metadata("design:paramtypes", [Object, OktaAuth,
        Injector])
], OktaCallbackComponent);
export { OktaCallbackComponent };
//# sourceMappingURL=callback.component.js.map