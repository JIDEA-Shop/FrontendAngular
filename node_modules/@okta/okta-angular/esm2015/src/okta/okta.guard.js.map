{"version":3,"file":"okta.guard.js","sourceRoot":"","sources":["../../package/src/okta/okta.guard.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Injectable, Injector, Inject } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n  NavigationStart, \n  Event,\n  CanLoad,\n  Route,\n  UrlSegment\n} from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nimport { OktaAuth, AuthState } from '@okta/okta-auth-js';\n\nimport { AuthRequiredFunction, OktaConfig, OKTA_CONFIG, OKTA_AUTH } from './models/okta.config';\n\n@Injectable()\nexport class OktaAuthGuard implements CanActivate, CanActivateChild, CanLoad {\n  private state: RouterStateSnapshot;\n  private onAuthRequired?: AuthRequiredFunction;\n\n\n  constructor(\n    @Inject(OKTA_CONFIG) private config: OktaConfig, \n    @Inject(OKTA_AUTH) private oktaAuth: OktaAuth, \n    private injector: Injector\n  ) { \n    this.onAuthRequired = this.config.onAuthRequired;\n\n    // Unsubscribe updateAuthStateListener when route change\n    const router = injector.get(Router);\n    router.events.pipe(\n      filter((e: Event) => e instanceof NavigationStart && this.state && this.state.url !== e.url)\n    ).subscribe(() => {\n      this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);\n    });\n  }\n\n  async canLoad(route: Route, segments: UrlSegment[]): Promise<boolean> {\n    this.onAuthRequired = route.data && route.data.onAuthRequired || this.onAuthRequired;\n\n    const isAuthenticated = await this.oktaAuth.isAuthenticated();\n    if (isAuthenticated) {\n      return true;\n    }\n\n    const originalUri = segments[0].path;\n    await this.handleLogin(originalUri);\n\n    return false;\n  }\n\n  /**\n   * Gateway for protected route. Returns true if there is a valid accessToken,\n   * otherwise it will cache the route and start the login flow.\n   * @param route\n   * @param state\n   */\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    // Track states for current route\n    this.state = state;\n    this.onAuthRequired = route.data && route.data.onAuthRequired || this.onAuthRequired;\n\n    // Protect the route after accessing\n    this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);\n    const isAuthenticated = await this.oktaAuth.isAuthenticated();\n    if (isAuthenticated) {\n      return true;\n    }\n\n    await this.handleLogin(state.url);\n\n    return false;\n  }\n\n  async canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Promise<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  private async handleLogin(originalUri: string): Promise<void> {\n    // Store the current path\n    this.oktaAuth.setOriginalUri(originalUri);\n\n    if (this.onAuthRequired) {\n      this.onAuthRequired(this.oktaAuth, this.injector);\n    } else {\n      this.oktaAuth.signInWithRedirect();\n    }\n  }\n\n  private updateAuthStateListener = (authState: AuthState) => {\n    if (!authState.isAuthenticated) {\n      this.handleLogin(this.state.url);\n    }\n  };\n\n}\n"]}